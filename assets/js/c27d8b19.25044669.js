"use strict";(self.webpackChunklab_protocol=self.webpackChunklab_protocol||[]).push([[553],{5177:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Draw/iTOL","title":"iTOL\u8fdb\u5316\u6811\u7f8e\u5316","description":"Color strip (DATASET_COLORSTRIP)","source":"@site/docs/Draw/iTOL.md","sourceDirName":"Draw","slug":"/Draw/iTOL","permalink":"/lab-protocol/Draw/iTOL","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"iTOL\u8fdb\u5316\u6811\u7f8e\u5316","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"\u5236\u5907\u611f\u53d7\u6001\u7ec6\u80de","permalink":"/lab-protocol/Basic Experiments/For protein"},"next":{"title":"Intro","permalink":"/lab-protocol/SSG/Intro"}}');var l=r(4848),a=r(8453);const s={title:"iTOL\u8fdb\u5316\u6811\u7f8e\u5316",sidebar_position:1},t="IQ-TREE & iTOL",d={},o=[{value:"Color strip (DATASET_COLORSTRIP)",id:"color-strip-dataset_colorstrip",level:2},{value:"\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6",id:"\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6",level:3},{value:"\u4ece\u7cfb\u7edf\u4e0a\u6279\u91cf\u6293\u53d6\u5206\u7ec4\u4e0d\u540c\u5e93\u6765\u6e90\u5e8f\u5217\uff0c\u5e76\u8fdb\u884c\u7f8e\u5316",id:"\u4ece\u7cfb\u7edf\u4e0a\u6279\u91cf\u6293\u53d6\u5206\u7ec4\u4e0d\u540c\u5e93\u6765\u6e90\u5e8f\u5217\u5e76\u8fdb\u884c\u7f8e\u5316",level:3},{value:"\u4ece\u670d\u52a1\u5668\u4e0a\u4f20\u5230\u672c\u5730",id:"\u4ece\u670d\u52a1\u5668\u4e0a\u4f20\u5230\u672c\u5730",level:3},{value:"Symbols (DATASET_SYMBOL)",id:"symbols-dataset_symbol",level:2},{value:"Simple bar (DATASET_SIMPLEBAR)",id:"simple-bar-dataset_simplebar",level:2},{value:"Gradient / Heatmap (DATASET_GRADIENT)",id:"gradient--heatmap-dataset_gradient",level:2},{value:"\u6b65\u9aa4\u4e09",id:"\u6b65\u9aa4\u4e09",level:3},{value:"\u6b65\u9aa4\u4e8c",id:"\u6b65\u9aa4\u4e8c",level:3},{value:"\u6b65\u9aa4\u4e09",id:"\u6b65\u9aa4\u4e09-1",level:3},{value:"\u6b65\u9aa4\u56db",id:"\u6b65\u9aa4\u56db",level:3},{value:"\u6b65\u9aa4\u4e94",id:"\u6b65\u9aa4\u4e94",level:3},{value:"\u6ce8",id:"\u6ce8",level:2},{value:"Reference",id:"reference",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"iq-tree--itol",children:"IQ-TREE & iTOL"})}),"\n",(0,l.jsx)(e.h2,{id:"color-strip-dataset_colorstrip",children:"Color strip (DATASET_COLORSTRIP)"}),"\n",(0,l.jsx)(e.h3,{id:"\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6",children:"\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6"}),"\n",(0,l.jsx)(e.p,{children:"\u6211\u5efa\u7684\u6587\u4ef6\u53eb\u505aitol_out"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-powershell",metastring:'title="ssh"',children:"mkdir -p /data1/guanti/ppl_work/B2_expand/itol_out\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u4ece\u7cfb\u7edf\u4e0a\u6279\u91cf\u6293\u53d6\u5206\u7ec4\u4e0d\u540c\u5e93\u6765\u6e90\u5e8f\u5217\u5e76\u8fdb\u884c\u7f8e\u5316",children:"\u4ece\u7cfb\u7edf\u4e0a\u6279\u91cf\u6293\u53d6\u5206\u7ec4\u4e0d\u540c\u5e93\u6765\u6e90\u5e8f\u5217\uff0c\u5e76\u8fdb\u884c\u7f8e\u5316"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-powershell",metastring:'title="ssh"',children:'awk -F\'\\t\' \'BEGIN{\r\n  print "DATASET_COLORSTRIP\\nSEPARATOR\\tTAB";\r\n  print "DATASET_LABEL\\tSourceDatabase";\r\n  print "COLOR\\t#000000\\n";\r\n  print "LEGEND_TITLE\\tDatabase Source";\r\n  print "LEGEND_SHAPES\\t1\\t1\\t1\\t1\\t1";\r\n  print "LEGEND_COLORS\\t#9f99d1\\t#86bada\\t#dbaad7\\t#f6beb0\\t#ffe3b3"; \r\n  print "LEGEND_LABELS\\tUniRef90\\tTara\\tMalaspina\\tGEM\\tOMD\\n";\r\n  print "DATA"\r\n}\r\n{\r\n  if($1 ~ /^UniRef90/) col="#9f99d1";\r\n  else if($1 ~ /^TARA_/) col="#86bada";\r\n  else if($1 ~ /^MALA_/) col="#dbaad7";\r\n  else if($1 ~ /^MARD_/ || $1 ~ /^GEM_/) col="#f6beb0";\r\n  else if($1 ~ /^BGEO_/) col="#ffe3b3";\r\n  else col="#7f7f7f";\r\n  print $1"\\t"col\r\n}\' /data1/guanti/ppl_work/B2_expand/tree/leaf_ids.txt \\\r\n> /data1/guanti/ppl_work/B2_expand/itol_out/itol_source.txt\n'})}),"\n",(0,l.jsx)(e.h3,{id:"\u4ece\u670d\u52a1\u5668\u4e0a\u4f20\u5230\u672c\u5730",children:"\u4ece\u670d\u52a1\u5668\u4e0a\u4f20\u5230\u672c\u5730"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"\u5728\u672c\u5730\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\r\n\u6211\u7684\u6587\u4ef6\u5939\u662fH\u76d8\u7684IQ-TREE\uff08\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528\u7a7a\u683c\uff09"}),"\n",(0,l.jsx)(e.li,{children:"\u4f7f\u7528scp\u6307\u4ee4\u4f20\u8f93"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-powershell",metastring:'title="powershell"',children:"scp guanti@124.16.144.150:/data1/guanti/ppl_work/B2_expand/itol_out/itol_source.txt H:\\IQ-TREE\\\n"})}),"\n",(0,l.jsx)(e.h2,{id:"symbols-dataset_symbol",children:"Symbols (DATASET_SYMBOL)"}),"\n",(0,l.jsx)(e.p,{children:"\u4e00\u76f4\u770b\u4e0d\u5230\u597d\u5947\u602a"}),"\n",(0,l.jsx)(e.h2,{id:"simple-bar-dataset_simplebar",children:"Simple bar (DATASET_SIMPLEBAR)"}),"\n",(0,l.jsx)(e.h2,{id:"gradient--heatmap-dataset_gradient",children:"Gradient / Heatmap (DATASET_GRADIENT)"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"nano"}),"\n",(0,l.jsx)(e.li,{children:"\u7c98\u8d34\u811a\u672c"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-powershell",metastring:'title="ssh"',children:'#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\n"""\r\nFrom a Newick tree:\r\n- make a SimpleBar dataset of terminal branch lengths per leaf\r\n- make a Gradient dataset of patristic distance from a seed leaf\r\nNo external deps.\r\n"""\r\nimport argparse, os, re\r\nfrom collections import defaultdict, deque\r\n\r\nclass Node:\r\n    __slots__ = ("id","name","parent","children","len")\r\n    def __init__(self, nid):\r\n        self.id = nid\r\n        self.name = None          # leaf/internal label\r\n        self.parent = None        # parent id\r\n        self.children = []        # child ids\r\n        self.len = 0.0            # edge length from parent\r\n\r\ndef parse_args():\r\n    ap = argparse.ArgumentParser()\r\n    ap.add_argument("--tree", required=True, help="IQ-TREE .treefile (Newick)")\r\n    ap.add_argument("--seed", required=True, help="seed leaf name (exact, e.g. ppl)")\r\n    ap.add_argument("--outdir", required=True, help="output directory for iTOL datasets")\r\n    return ap.parse_args()\r\n\r\ndef parse_newick_build_tree(nwk):\r\n    nodes = []\r\n    def new_node():\r\n        n = Node(len(nodes))\r\n        nodes.append(n)\r\n        return n\r\n\r\n    stack = []\r\n    root = None\r\n    i, n = 0, len(nwk)\r\n    last = None\r\n    pending_internal = None\r\n\r\n    while i < n:\r\n        ch = nwk[i]\r\n        if ch in \' \\t\\r\\n\':\r\n            i += 1; continue\r\n        if ch == \'(\':\r\n            # new internal\r\n            inode = new_node()\r\n            if stack:\r\n                inode.parent = stack[-1].id\r\n                stack[-1].children.append(inode.id)\r\n            else:\r\n                root = inode\r\n            stack.append(inode)\r\n            last = \'(\'\r\n            i += 1\r\n        elif ch == \')\':\r\n            # finish current internal; may follow name:length\r\n            pending_internal = stack.pop()\r\n            last = \')\'\r\n            i += 1\r\n        elif ch == \',\':\r\n            last = \',\'\r\n            i += 1\r\n        elif ch == \';\':\r\n            break\r\n        else:\r\n            # read label\r\n            if ch in "\'\\"":\r\n                q = ch; i += 1; s = i\r\n                while i < n and nwk[i] != q: i += 1\r\n                label = nwk[s:i]; i += 1\r\n            else:\r\n                s = i\r\n                while i < n and nwk[i] not in \'():,;\':\r\n                    i += 1\r\n                label = nwk[s:i].strip()\r\n\r\n            # read optional branch length\r\n            br = None\r\n            if i < n and nwk[i] == \':\':\r\n                i += 1\r\n                s = i\r\n                while i < n and nwk[i] not in \',)\':\r\n                    i += 1\r\n                brs = nwk[s:i]\r\n                try: br = float(brs)\r\n                except: br = 0.0\r\n\r\n            if last in (\'(\', \',\'):\r\n                # this is a leaf\r\n                leaf = new_node()\r\n                leaf.name = label\r\n                leaf.len = br or 0.0\r\n                if stack:\r\n                    leaf.parent = stack[-1].id\r\n                    stack[-1].children.append(leaf.id)\r\n            elif last == \')\':\r\n                # label/length for the internal node we just closed\r\n                if label: pending_internal.name = label\r\n                if br is not None: pending_internal.len = br\r\n            last = \'label\'\r\n    return nodes, root.id if root else 0\r\n\r\ndef build_adj(nodes):\r\n    adj = defaultdict(list)\r\n    for n in nodes:\r\n        if n.parent is not None:\r\n            w = n.len or 0.0\r\n            adj[n.id].append((n.parent, w))\r\n            adj[n.parent].append((n.id, w))\r\n    return adj\r\n\r\ndef distances_from(seed_id, adj):\r\n    dist = {seed_id: 0.0}\r\n    dq = deque([seed_id])\r\n    while dq:\r\n        u = dq.popleft()\r\n        for v, w in adj.get(u, []):\r\n            if v not in dist:\r\n                dist[v] = dist[u] + (w or 0.0)\r\n                dq.append(v)\r\n    return dist\r\n\r\ndef write_simplebar(path, label, pairs):\r\n    with open(path, "w", encoding="utf-8") as w:\r\n        w.write("DATASET_SIMPLEBAR\\n")\r\n        w.write("SEPARATOR\\tTAB\\n")\r\n        w.write(f"DATASET_LABEL\\t{label}\\n")\r\n        w.write("COLOR\\t#3182bd\\n\\n")\r\n        w.write("DATA\\n")\r\n        for leaf, val in pairs:\r\n            w.write(f"{leaf}\\t{val}\\n")\r\n\r\ndef write_gradient(path, label, pairs):\r\n    with open(path, "w", encoding="utf-8") as w:\r\n        w.write("DATASET_GRADIENT\\n")\r\n        w.write("SEPARATOR\\tTAB\\n")\r\n        w.write(f"DATASET_LABEL\\t{label}\\n")\r\n        # 3-color\u68af\u5ea6\uff1a\u84dd-\u767d-\u7ea2\r\n        w.write("COLOR_MIN\\t#2c7bb6\\n")\r\n        w.write("COLOR_MID\\t#ffffbf\\n")\r\n        w.write("COLOR_MAX\\t#d7191c\\n\\n")\r\n        w.write("DATA\\n")\r\n        for leaf, val in pairs:\r\n            w.write(f"{leaf}\\t{val}\\n")\r\n\r\ndef main():\r\n    args = parse_args()\r\n    os.makedirs(args.outdir, exist_ok=True)\r\n    with open(args.tree, "r", encoding="utf-8") as f:\r\n        nwk = f.read()\r\n\r\n    nodes, root_id = parse_newick_build_tree(nwk)\r\n    # \u53f6\u5b50\u4e0e\u672b\u7aef\u5206\u652f\u957f\u5ea6\r\n    leaves = [n for n in nodes if (not n.children) and n.name]\r\n    leaf_branch = {n.name: (n.len or 0.0) for n in leaves}\r\n\r\n    # \u8ddd\u79bb seed \u7684\u8c31\u7cfb\u8ddd\u79bb\r\n    seed_candidates = [n for n in leaves if n.name == args.seed] \\\r\n                      or [n for n in leaves if n.name.lower() == args.seed.lower()]\r\n    if not seed_candidates:\r\n        raise SystemExit(f"[ERR] seed \'{args.seed}\' not found among {len(leaves)} leaves.")\r\n    seed = seed_candidates[0]\r\n    adj = build_adj(nodes)\r\n    dist_all = distances_from(seed.id, adj)\r\n    leaf_dist = [(n.name, dist_all.get(n.id, 0.0)) for n in leaves]\r\n\r\n    # \u5199 iTOL \u6587\u4ef6\r\n    out1 = os.path.join(args.outdir, "itol_branchlen_bar.txt")\r\n    out2 = os.path.join(args.outdir, "itol_seed_distance_gradient.txt")\r\n    write_simplebar(out1, "TerminalBranchLen", sorted(leaf_branch.items()))\r\n    write_gradient(out2, f"Dist_to_{args.seed}", sorted(leaf_dist))\r\n    print("[OK] Wrote:", out1, "and", out2)\r\n\r\nif __name__ == "__main__":\r\n    main()\n'})}),"\n",(0,l.jsxs)(e.ol,{start:"3",children:["\n",(0,l.jsx)(e.li,{children:"\u6267\u884c"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-powershell",metastring:'title="ssh"',children:"python3 /data1/guanti/tools/tree_metrics_to_itol.py \\\r\n  --tree   /data1/guanti/ppl_work/B2_expand/tree/ppl90_quick.treefile \\\r\n  --seed   ppl \\\r\n  --outdir /data1/guanti/ppl_work/B2_expand/itol_out\n"})}),"\n",(0,l.jsxs)(e.ol,{start:"4",children:["\n",(0,l.jsx)(e.li,{children:"\u6267\u884c\u540e\u4f1a\u5f97\u5230\u4e24\u4e2a\u4e0a\u4f20\u7684\u6587\u6863"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-powershell",metastring:'title="powershell"',children:"scp guanti@124.16.144.150:/data1/guanti/ppl_work/B2_expand/itol_out/itol_branchlen_bar H:\\IQ-TREE\\\r\nscp guanti@124.16.144.150:/data1/guanti/ppl_work/B2_expand/itol_out/itol_seed_distance_gradient H:\\IQ-TREE\\\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u6b65\u9aa4\u4e09",children:"\u6b65\u9aa4\u4e09"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"\u6311\u53d6\u5927\u80a0\u6746\u83cc\u5212\u7ebf\u4e8e\u65e0\u6297 LB \u5e73\u677f\u4e0a\uff0c37\u2103 \u6052\u6e29\u57f9\u517b\u8fc7\u591c\uff0816-18h\uff09"}),"\n",(0,l.jsx)(e.li,{children:"\uff08\u4e5f\u53ef\u4ee5\u7528\u6db2\u4f53\u57f9\u517b\u57fa\u57f9\u517b\uff09\u5c06\u5927\u80a0\u6746\u83cc\uff0810\u03bcL\uff09\u52a0\u5165 LB \u57f9\u517b\u57fa\u4e2d\uff0c37\u2103 \u8fc7\u591c"}),"\n"]}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsx)(e.p,{children:"\u6b65\u9aa4\u4e00\u53ea\u4e3a\u5f97\u5230\u6d3b\u5316\u7684\u539f\u59cb\u83cc\u682a\uff0c\u56fa\u4f53\u57f9\u517b\u57fa\u548c\u6db2\u4f53\u57f9\u517b\u57fa\u590d\u82cf\u6548\u679c\u5bf9\u540e\u671f\u611f\u53d7\u6001\u7ec6\u80de\u7684\u8f6c\u5316\u6548\u7387\u65e0\u660e\u663e\u5dee\u522b"})}),"\n",(0,l.jsx)(e.h3,{id:"\u6b65\u9aa4\u4e8c",children:"\u6b65\u9aa4\u4e8c"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\u6311\u5355\u83cc\u843d\u4e8e 50 mL \u65e0\u6297 S.O.B. \u57f9\u517b\u57fa\uff08\u6216\u8005 LB \u57f9\u517b\u57fa\uff09\u4e2d37\u2103 200r/min \u57f9\u517b3-4h\uff0c\u81f3 OD",(0,l.jsx)("sub",{children:"600"})," = 0.4\uff0c\u8d85\u8fc7 0.6 \u4e0d\u5229\u4e8e\u5236\u4f5c\u611f\u53d7\u6001\u7ec6\u80de"]}),"\n",(0,l.jsx)(e.li,{children:"\uff08\u6db2\u4f53\u57f9\u517b\u57fa\u7684\u83cc\uff09\u83cc\uff1aLB=1:100~1:300 \uff0c37\u2103\uff0c110r \u5267\u70c8\u6447 1-3h"}),"\n"]}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsx)(e.p,{children:"\u6b65\u9aa4\u4e8c\u4e3b\u8981\u4e3a\u4e86\u83b7\u5f97OD=0.4\u7684\u7ec6\u80de"})}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsxs)(e.p,{children:["\u7531\u4e8e\u672a\u660e\u539f\u56e0\uff0c\u5728\u5927\u80a0\u6746\u83cc\u7684\u751f\u957f\u66f2\u7ebf\u4e0a\uff0c\u6709\u4e24\u4e2a\u65f6\u671f\u7684\u5927\u80a0\u6746\u83cc\u53ef\u4ee5\u6709\u8f83\u9ad8\u7684\u8f6c\u5316\u6548\u7387\uff0c\u4e00\u4e2a\u5728\u521d\u671f\uff08 OD",(0,l.jsx)("sub",{children:"600"})," = 0.4\uff09( Hunahan 1983)\uff0c\u53e6\u4e00\u4e2a\u5728\u672b\u671f\uff08 OD",(0,l.jsx)("sub",{children:"600"})," = 0.95 \uff09( Tang et al, 1994)\u3002\u524d\u671f\u6536\u83b7\u7684\u83cc\u5bb9\u6613\u6709\u6548\u662f\u56e0\u4e3a\u5b83\u7684\u9ad8\u8f6c\u5316\u7387\u80fd\u6301\u7eed\u7684\u65f6\u95f4\u66f4\u957f\uff0c\u800c\u540e\u671f\u7684\u751f\u957f\u5cf0\u8f83\u9661\u5ced\uff0c\u5728\u6536\u96c6\u7ec6\u83cc\u65f6\u82e5\u7a0d\u803d\u8bef 2~3 min\uff0c\u5c06\u4f1a\u4f7f\u8f6c\u5316\u6548\u7387\u964d\u4f4e\u4e00\u4e2a\u6570\u91cf\u7ea7\u3002"]})}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsx)(e.p,{children:"\u6b32\u5236\u4f5c\u66f4\u9ad8\u6548\u7684\u611f\u53d7\u6001\u7ec6\u80de\uff0c\u53ef\u4ee5\u9009\u62e9\u7528 18-25\u2103 \u8fc7\u591c\u6447\u83cc\uff0c\u53ef\u4ee5 20\u2103/23\u2103 16h"})}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsx)(e.p,{children:"S.O.B. \u57f9\u517b\u57fa\u5236\u4f5c\u611f\u53d7\u6001\u7ec6\u80de\u7684\u8f6c\u5316\u6548\u7387\u6bd4 LB \u9ad8"})}),"\n",(0,l.jsx)(e.h3,{id:"\u6b65\u9aa4\u4e09-1",children:"\u6b65\u9aa4\u4e09"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"\u57f9\u517b\u6db2\uff08\u83cc\u6db2\uff09\u51b0\u4e0a\u9884\u51b7 15min"}),"\n",(0,l.jsx)(e.li,{children:"\uff08\u65e0\u83cc\u64cd\u4f5c\uff09\u53d6\u51fa\u6447\u597d\u6d3b\u5316\u7684\u83cc\uff0c\u53d6 1~1.5mL \u52a0\u5165 Ep \u7ba1\u4e2d\uff0c4\u2103\uff0c4100r\uff0c1-5min"}),"\n"]}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsx)(e.p,{children:"\u6bcf\u4e2a\u8d28\u7c92\u8981\u7528 50\u03bcL \u7684\u611f\u53d7\u6001\u7ec6\u80de\uff1b\u82e5\u83cc\u4f53\u8f83\u5c11\uff0c\u6b64\u6b65\u9aa4\u53ef\u4ee5\u91cd\u590d\u4e00\u6b21"})}),"\n",(0,l.jsx)(e.h3,{id:"\u6b65\u9aa4\u56db",children:"\u6b65\u9aa4\u56db"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"\u7528\u67aa\u5934\u5438\u51fa\u4e0a\u5c42\u57f9\u517b\u6db2\uff0c\u5f03\u4e4b\uff0c\u5012\u7f6e 1 min\uff0c\u6d41\u5c3d\u57f9\u517b\u6db2"}),"\n",(0,l.jsxs)(e.li,{children:["\u52a0\u5165\uff08\u521d\u59cb\u57f9\u517b\u6db2",":CaCl",(0,l.jsx)("sub",{children:"2"})," = 50:3\uff09\u9884\u51b7\u8fc7\u7684 4\u2103 0.1 mol/L \u7684 CaCl",(0,l.jsx)("sub",{children:"2"})," \u91cd\u60ac\u7ec6\u80de\u6c89\u6dc0\uff0c\u8f7b\u8f7b\u62bd\u5438\u6df7\u5300\uff0c\u51b0\u4e0a\u653e\u7f6e 30-60min"]}),"\n",(0,l.jsx)(e.li,{children:"4\u2103\uff0c4100r\uff0c1min"}),"\n",(0,l.jsx)(e.li,{children:"\u6b64\u6b65\u9aa4\u91cd\u590d\u4e00\u904d"}),"\n"]}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsxs)(e.p,{children:["\u6216\u8005\u7528 0.1 mol/L \u7684 CaCl",(0,l.jsx)("sub",{children:"2"}),"-MgCl",(0,l.jsx)("sub",{children:"2"})," \u6eb6\u6db2\uff0c80 mmol/L \u7684 MgCl",(0,l.jsx)("sub",{children:"2"}),"\uff0c20mmol/L\u7684 CaCl",(0,l.jsx)("sub",{children:"2"})]})}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsxs)(e.p,{children:["\u5728 Hanahan \u7684\u611f\u53d7\u6001\u5236\u5907\u4e2d\uff0c\u6b64\u6b65\u9aa4\u7528 TFB & FSB \u4ee3\u66ff\u4e86 CaCl",(0,l.jsx)("sub",{children:"2"})," \u6eb6\u6db2\uff0c\u4f46\u662f\u8fc7\u4e8e\u7e41\u590d\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u7528CaCl",(0,l.jsx)("sub",{children:"2"})," \u6216\u8005 CaCl",(0,l.jsx)("sub",{children:"2"}),"-MgCl",(0,l.jsx)("sub",{children:"2"})]})}),"\n",(0,l.jsx)(e.h3,{id:"\u6b65\u9aa4\u4e94",children:"\u6b65\u9aa4\u4e94"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"\u5f03\u53bb\u4e0a\u6e05\uff0c\u5012\u7f6e1min\u3002"}),"\n",(0,l.jsxs)(e.li,{children:["\u6bcf1.5mL EP \u7ba1\u4e2d\uff0c\u52a0\u5165100\u03bcL\u9884\u51b7 CaCl",(0,l.jsx)("sub",{children:"2"}),"\u6eb6\u6db2\uff08\u6216\u8005TFB\uff09\u548c 50\u03bcL 50%\u7518\u6cb9\uff0c\u7528\u79fb\u6db2\u67aa\u8f7b\u8f7b\u4e0a\u4e0b\u6253\u5300\u3002\r\n\uff08\u6bcf 50mL \u52a0 2.5mL CaCl",(0,l.jsx)("sub",{children:"2"}),"\uff0c1.25mL\u7518\u6cb9\uff09"]}),"\n",(0,l.jsx)(e.li,{children:"100\u03bcL/\u7ba1\u51b0\u4e0a\u653e\u7f6e 1.5 mL \u79bb\u5fc3\u7ba1\u4e2d\uff0c\u5c01\u53e3\u6807\u8bb0"}),"\n",(0,l.jsx)(e.li,{children:"\u6db2\u6c2e\u901f\u51bb"}),"\n",(0,l.jsx)(e.li,{children:"\u53ef\u76f4\u63a5\u7528 \u6216\u8005 -80\u2103 \u4fdd\u5b58\u5907\u7528"}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"\u6ce8",children:"\u6ce8"}),"\n",(0,l.jsxs)(e.p,{children:["\u672c Protocol \u6839\u636e Douglas Hanahan \u8d85\u7ea7\u611f\u53d7\u6001\u5236\u5907\u65b9\u6cd5 ",(0,l.jsx)("sup",{children:"[1]"})," \u53ca\u6539\u826f\u65b9\u6cd5 ",(0,l.jsx)("sup",{children:"[2]"})," \u7b80\u5316\u5f97\u5230\u3002"]}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsxs)(e.p,{children:["\u706d\u83cc\u6307\u9ad8\u538b\u84b8\u6c7d\u706d\u83cc\u3002\u5176\u4ed6\u6eb6\u6db2\u7684\u914d\u5236\u5747\u9700\u8981\u7528\u9ad8\u538b\u84b8\u6c7d\u706d\u83cc\u7684 ddH",(0,l.jsx)("sub",{children:"2"}),"O\uff08 Milli-Q \u8d85\u7eaf\u6c34\u6216\u76f8\u540c\u7b49\u7ea7\uff09\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\u7528 0.22 \u7684\u6ee4\u819c\u8fc7\u6ee4\u3002"]})}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsxs)(e.p,{children:["\u611f\u53d7\u6001\u5728 4\u2103 CaCl",(0,l.jsx)("sub",{children:"2"})," \u4e2d\u4fdd\u5b58 24-48h\uff0c\u5728\u6700\u521d\u4fdd\u5b58\u7684 12-24h \u5185\uff0c\u8f6c\u5316\u6548\u7387\u4f1a\u6709\u6240\u63d0\u9ad8\u3002\r\n\u73bb\u7483\u7ba1\u4f1a\u964d\u4f4e\u8f6c\u5316\u738710\u500d\u3002\u914d\u7f6e\u6eb6\u6db2\u7684\u6c34\u53d7\u5230\u6709\u673a\u6c61\u67d3\u4f1a\u964d\u4f4e\u8f6c\u5316\u6548\u7387\u3002\r\n10%\u7518\u6cb9\u4f1a\u4f7f\u7ec6\u83cc\u6c89\u6dc0\u9644\u7740\u529b\u964d\u4f4e\u3002\u6db2\u6c2e\u901f\u51bb\u53ef\u4ee5\u63d0\u9ad8\u8f6c\u5316\u6548\u7387\u7ea65\u500d\u3002"]})}),"\n",(0,l.jsx)("div",{class:"note",children:(0,l.jsx)(e.p,{children:"\u672c Protocol \u9002\u7528\u4e8e E. coli strain to be transformed (e.g., DH1, DH5, MM294, JM108/9, DH5\u03b1, DH10B, TOP10, or Mach1) (as frozen stock).\r\nHanahan\u2019s procedure works well with strains of E. coli K-12 commonly used in molecular cloning, including DH1, DH5, MM294, JM108/9, DH5\u03b1, DH10B, TOP10, and Mach1. The procedure also works (although not quite as well) with BL3, a derivation of E. coli strain B. However, some other strains of E. coli do not work as well. Thus, wherever possible, use a strain with a track record of success."})}),"\n",(0,l.jsx)(e.h2,{id:"reference",children:"Reference"}),"\n",(0,l.jsx)(e.p,{children:"[1]  Hanahan, D., Jessee, J. and Bloom, F.R., 1991. [4] Plasmid transformation of Escherichia coli and other bacteria. Methods in enzymology, 204, pp.63-113."}),"\n",(0,l.jsx)(e.p,{children:"[2]  Green, M.R. and Sambrook, J., 2018. The Hanahan method for preparation and transformation of competent Escherichia coli: high-efficiency transformation. Cold Spring Harbor Protocols, 2018(3), pp.pdb-prot101188."})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>t});var i=r(6540);const l={},a=i.createContext(l);function s(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:s(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);